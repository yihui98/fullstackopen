{"version":3,"sources":["components/Note.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","content","onClick","baseUrl","axios","get","then","response","data","newObject","post","id","put","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","useEffect","noteService","initialNotes","console","log","length","notesToShow","filter","map","find","n","changedNote","returnedNote","catch","error","alert","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","concat","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"uJAceA,EAZF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACdC,EAAQF,EAAKG,UACf,qBAAuB,iBAE3B,OACE,+BAAKH,EAAKI,QACV,wBAAQC,QAASJ,EAAjB,SAAoCC,Q,gBCNlCI,EAAU,wDAkBD,EAhBA,WAEb,OADgBC,IAAMC,IAAIF,GACXG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAc5B,EAXA,SAAAC,GAEb,OADgBL,IAAMM,KAAKP,EAASM,GACrBH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAS5B,EANA,SAACG,EAAIF,GAElB,OADgBL,IAAMQ,IAAN,UAAaT,EAAb,YAAwBQ,GAAMF,GAC/BH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SC0E5BK,EArFH,WACV,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA8BF,mBAAS,IAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAA8BJ,oBAAS,GAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KAEAC,qBAAU,WACRC,IAEGhB,MAAK,SAAAiB,GACJP,EAASO,QAEZ,IACHC,QAAQC,IAAI,SAAUV,EAAMW,OAAQ,SAEpC,IAsBMC,EAAcR,EAClBJ,EACAA,EAAMa,QAAO,SAAA/B,GAAI,OAAIA,EAAKG,aAqB5B,OACE,gCACE,uCACA,8BACE,yBAAQE,QAAS,kBAAMkB,GAAYD,IAAnC,kBACQA,EAAU,YAAc,WAGlC,6BACGQ,EAAYE,KAAI,SAAAhC,GAAI,OACjB,cAAC,EAAD,CACCA,KAAMA,EACNC,iBAAkB,kBA/BF,SAAAa,GAChB,sCAAkCA,GAA3C,IACMd,EAAOkB,EAAMe,MAAK,SAAAC,GAAC,OAAIA,EAAEpB,KAAOA,KAChCqB,EAAW,2BAAQnC,GAAR,IAAcG,WAAYH,EAAKG,YAEhDsB,EACUX,EAAIqB,GACX1B,MAAK,SAAA2B,GACNjB,EAASD,EAAMc,KAAI,SAAAhC,GAAI,OAAIA,EAAKc,KAAOA,EAAKd,EAAOoC,MAClDC,OAAM,SAAAC,GACLC,MAAM,aAAD,OACUvC,EAAKI,QADf,sCAGLe,EAASD,EAAMa,QAAO,SAAAG,GAAC,OAAIA,EAAEpB,KAAOA,YAkBP0B,CAAmBxC,EAAKc,MAFtCd,EAAKc,SAKtB,uBAAM2B,SA5DM,SAACC,GACfA,EAAMC,iBACN,IAAMC,EAAa,CACjBxC,QAASgB,EACTyB,MAAM,IAAIC,MAAOC,cACjB5C,UAAW6C,KAAKC,SAAW,GAC3BnC,GAAII,EAAMW,OAAS,GAGrBJ,EACQmB,GACPnC,MAAK,SAAA2B,GACJjB,EAASD,EAAMgC,OAAOd,IACtBf,EAAW,QA+CX,UACE,uBACE8B,MAAO/B,EACPgC,SA9CiB,SAACV,GACxBf,QAAQC,IAAIc,EAAMW,OAAOF,OACzB9B,EAAWqB,EAAMW,OAAOF,UA8CpB,wBAAQG,KAAK,SAAb,yBCjFRC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.3c6ef92e.chunk.js","sourcesContent":["import React from 'react'\n\nconst Note = ({ note, toggleImportance }) => {\n  const label = note.important\n    ? 'make not important' : 'make important'\n\n  return (\n    <li>{note.content}\n    <button onClick={toggleImportance}>{label}</button>\n    </li>\n    \n  )\n}\n\nexport default Note","import axios from 'axios'\r\n//const baseUrl = 'http://localhost:3001/api/notes'\r\nconst baseUrl = 'https://morning-bastion-54031.herokuapp.com/api/notes'\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst create = newObject => {\r\n  const request = axios.post(baseUrl, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\n\r\nexport default { getAll, create, update }\r\n\r\n/*\r\nexport default { \r\n  getAll: getAll, \r\n  create: create, \r\n  update: update \r\n} more compact way of expressing the dictionary\r\n since key and variables are the same\r\n  */","import React, { useState, useEffect } from 'react'\nimport Note from './components/Note'\nimport axios from 'axios'\nimport noteService from './services/notes'\n\nconst App = () => {\n  const [notes, setNotes] = useState([])\n  const [newNote, setNewNote] = useState('')\n  const [showAll, setShowAll] = useState(false)\n\n  useEffect(() => {\n    noteService\n      .getAll()\n      .then(initialNotes => {\n        setNotes(initialNotes)\n      })\n  }, [])\n  console.log('render', notes.length, 'notes')\n\n  const addNote = (event) => {\n    event.preventDefault()\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() > 0.5,\n      id: notes.length + 1,\n    }\n\n    noteService\n    .create(noteObject)\n    .then(returnedNote => {\n      setNotes(notes.concat(returnedNote))\n      setNewNote('')\n    })\n  }\n\n  const handleNoteChange = (event) => {\n    console.log(event.target.value)\n    setNewNote(event.target.value)\n  }\n\n  const notesToShow = showAll\n  ? notes\n  : notes.filter(note => note.important)\n\n  const toggleImportanceOf = id => {\n    const url = `http://localhost:3001/notes/${id}`\n    const note = notes.find(n => n.id === id)\n    const changedNote = { ...note, important: !note.important }\n  \n    noteService\n      .update(id, changedNote)\n      .then(returnedNote => {\n      setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n      .catch(error => {\n        alert(\n          `the note '${note.content}' was already deleted from server`\n        )\n        setNotes(notes.filter(n => n.id !== id)) //filter out deleted note\n      })\n    })\n  }\n  \n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all' }\n        </button>\n      </div>   \n      <ul>\n        {notesToShow.map(note => \n            <Note key={note.id}\n             note={note}\n             toggleImportance={() => toggleImportanceOf(note.id)} />\n        )}\n      </ul>\n      <form onSubmit={addNote}>\n        <input\n          value={newNote}\n          onChange={handleNoteChange}\n        />\n        <button type=\"submit\">save</button>\n      </form>  \n    </div>\n  )\n}\n\nexport default App","import ReactDOM from 'react-dom'\nimport App from './App.js'\n\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}